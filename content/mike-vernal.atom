<!--Generated by a crappy script that Craig Andera wrote : https://github.com/candera/cs-atom--><feed xmlns="http://www.w3.org/2005/Atom" xmlns:thr="http://purl.org/syndication/thread/1.0"><id>feed-id</id><updated>2011-12-25T08:45:14.336-05:00</updated><title type="text">Blog Title Here</title><generator version="7.00" uri="http://www.blogger.com">Blogger</generator><entry><id>18476</id><published>2006-01-30T23:20:00.0-05:00</published><updated>2006-01-30T23:20:00.0-05:00</updated><category scheme="http://schemas.google.com/g/2005#kind" term="http://schemas.google.com/blogger/2008/kind#post"></category><title type="text">Greetings</title><content type="html">&lt;p&gt;&lt;font size="2" face="Verdana"&gt;Greetings from Building 42!&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;(Yes, the Windows Communication Foundation (as well as the .NET Framework and the CLR) are built in Building 42.)&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;After years of resisting, I've finally decided to sit down and do the blog-about-WCF thing.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;My name is Mike, and I'm a Program Manager on the WCF team.  I work on the design and implementation of the Service Model, including the core programming metaphors (Services, Endpoints, Contracts, Behaviors, Bindings, Addresses) and the core runtime pieces (Dispatcher, Channels, etc.).  I also work closely with the way we map to and from WSDL and XSD.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;I plan to use this space to basically rant, but every so often I may make fun of Don or Doug.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;My first rant, though, is reserved for the fine poster people at Microsoft.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;One of the plagues that, I guess, infects any large corporation is the need for lots and lots of informative posters.  Update Your Benefits!  Cheer Your Local Localization Team!  Etc.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;One of my new favorites is the poster entitled “Super Meetings.“  To be frank, the poster basically stands alone:&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;center&gt;&lt;a href="http://www.pluralsight.com/mvernal/SuperMeetings.jpg"&gt;&lt;img border="0" width="640" src="http://www.pluralsight.com/mvernal/SuperMeetings.jpg" /&gt;&lt;/a&gt;&lt;/center&gt;

&lt;p&gt;&lt;font size="2" face="Verdana"&gt;To quote classic Simpsons: “Unless your being ironic, turn that off now!”&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;-mike&lt;/font&gt;&lt;/p&gt;</content><author><name>mike-vernal</name></author><thr:total>3</thr:total></entry><entry><id>18489</id><published>2006-01-31T10:12:00.0-05:00</published><updated>2006-01-31T10:12:00.0-05:00</updated><category scheme="http://schemas.google.com/g/2005#kind" term="http://schemas.google.com/blogger/2008/kind#comment"></category><title type="text">re: Greetings</title><content type="html">Excellent first rant. Makes one feel good to know that a company is successful enough to not only have middle managers with little more to do than plan successful meetings AND have clever poster people to draw cartoon meeting posters about them. Currently I have to draw my own cartoons and for some reason I always make myself look unhappy to be in my meetings...</content><author><name>Anonymous</name></author><thr:in-reply-to ref="18476"></thr:in-reply-to></entry><entry><id>18599</id><published>2006-02-06T09:31:00.0-05:00</published><updated>2006-02-06T09:31:00.0-05:00</updated><category scheme="http://schemas.google.com/g/2005#kind" term="http://schemas.google.com/blogger/2008/kind#comment"></category><title type="text">re: Greetings</title><content type="html">Be careful, Mike!  you don't want this information to fall into our competitors' hands.  imagine their resultant effectiveness!
&lt;br /&gt;-- Alex (Dej)</content><author><name>Anonymous</name></author><thr:in-reply-to ref="18476"></thr:in-reply-to></entry><entry><id>69405</id><published>2009-07-04T06:07:15.0-05:00</published><updated>2009-07-04T06:07:15.0-05:00</updated><category scheme="http://schemas.google.com/g/2005#kind" term="http://schemas.google.com/blogger/2008/kind#comment"></category><title type="text">Indian viagra.</title><content type="html">Buy viagra.</content><author><name>Anonymous</name></author><thr:in-reply-to ref="18476"></thr:in-reply-to></entry><entry><id>18523</id><published>2006-02-01T14:08:00.0-05:00</published><updated>2006-02-01T14:08:00.0-05:00</updated><category scheme="http://schemas.google.com/g/2005#kind" term="http://schemas.google.com/blogger/2008/kind#post"></category><title type="text">Fancy Addressing in WCF</title><content type="html">&lt;p&gt;&lt;font face="Verdana"&gt;&lt;font size="2"&gt;One of the core specs that WCF implements is &lt;/font&gt;&lt;a href="http://www.w3.org/TR/2005/CR-ws-addr-core-20050817/"&gt;&lt;font size="2"&gt;WS-Addressing&lt;/font&gt;&lt;/a&gt;&lt;font size="2"&gt;.&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;At the highest level, WS-Addressing essentially defines three things.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;First, WS-Addressing defines a core address construct called Endpoint Reference.  An Endpoint Reference provides a mechanism for identifying a Web service endpoint.  In the WCF object model, we call this thing an EndpointAddress.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;Second, WS-Addressing defines a set of Message Addressing Headers.  These headers -- To, ReplyTo, FaultTo, MessageID, RelatesTo, etc. -- are useful for defining (a) where an initial message is going, (b) how to send messages in reaction to that initial message and (c) how to tell that those reactionary messages are related to the initial message.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;Third (though it's not usually called out separately), WS-Addressing defines an Action header.  This essentially defines the intent of the Message.  Typically, if you want to figure out how to process a Message, you use the action as your key.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;We tend to think of the Message Addressing Headers primarily as plumbing.  For instance, if you want to correlate a request message with a response message over TCP or UDP, you need the ReplyTo, MessageID, and RelatesTo mechanisms.  If you want to figure out to what endpoint you should dispatch a message, you look at the To.  Etc.  Our runtime adds and inspects these headers to do things like request-reply correlation.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;Sometimes, though, people end up wanting to do fancy things with addressing at the application layer.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;For instance, one pattern is to send a one-way message to a lot of folks (e.g., using UDP multicast) and provide them with a mechanism for sending back one-way reply messages.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;To do this in WCF, you just need to use OperationContext.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;For instance, suppose I had the following two contracts:&lt;/font&gt;&lt;/p&gt;&lt;font size="2"&gt;
&lt;/font&gt;&lt;blockquote style="MARGIN-RIGHT: 0px" dir="ltr"&gt;&lt;font face="Courier New"&gt;[&lt;/font&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#008080"&gt;ServiceContract&lt;font color="#000000"&gt;]&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;br /&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;
&lt;/font&gt;&lt;p&gt;&lt;font face="Courier New"&gt;interface&lt;/font&gt;&lt;font face="Courier New"&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#008080"&gt;QueryContract&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;&lt;font size="2"&gt;
&lt;/font&gt;&lt;p&gt;&lt;font face="Courier New"&gt;{&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;    [&lt;/font&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#008080"&gt;OperationContract&lt;/font&gt;&lt;font size="2"&gt;(IsOneWay = &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;true&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt;)]&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#0000ff"&gt;    void&lt;/font&gt;&lt;font size="2"&gt; Query(&lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;string&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt; query);&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;}&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;[&lt;/font&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#008080"&gt;ServiceContract&lt;/font&gt;&lt;font size="2"&gt;]&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;&lt;font size="2" color="#0000ff"&gt;
&lt;/font&gt;&lt;p&gt;&lt;font face="Courier New"&gt;interface&lt;/font&gt;&lt;font face="Courier New"&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#008080"&gt;QueryCallbackContract&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;&lt;font size="2"&gt;
&lt;/font&gt;&lt;p&gt;&lt;font face="Courier New"&gt;{&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;    [&lt;/font&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#008080"&gt;OperationContract&lt;/font&gt;&lt;font size="2"&gt;(IsOneWay = &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;true&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt;)]&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#0000ff"&gt;    void&lt;/font&gt;&lt;font size="2"&gt; Response(&lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;string&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt; response);&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;}&lt;/font&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p dir="ltr"&gt;&lt;font face="Verdana"&gt;The first contract (QueryContract) represents the one-way message that I want to send out.  The second contract (QueryCallbackContract) represents the one-way message I expect in return.&lt;/font&gt;&lt;/p&gt;
&lt;p dir="ltr"&gt;&lt;font face="Verdana"&gt;Now, suppose you want to correlate a Query message with a Response message.&lt;/font&gt;&lt;/p&gt;
&lt;p dir="ltr"&gt;&lt;font face="Verdana"&gt;To do that, you'd first create up the appropriate channel / channel factory:&lt;/font&gt;&lt;/p&gt;&lt;font size="2"&gt;
&lt;/font&gt;&lt;blockquote style="MARGIN-RIGHT: 0px" dir="ltr"&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#008080"&gt;CustomBinding&lt;/font&gt;&lt;font size="2"&gt; binding = &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;new&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#008080"&gt;CustomBinding&lt;/font&gt;&lt;font size="2"&gt;(&lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;new&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#008080"&gt;TextMessageEncodingBindingElement&lt;/font&gt;&lt;font size="2"&gt;(), &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;new&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#008080"&gt;HttpTransportBindingElement&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt;());&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#008080"&gt;ChannelFactory&lt;/font&gt;&lt;font size="2"&gt;&amp;lt;&lt;/font&gt;&lt;font size="2" color="#008080"&gt;QueryContract&lt;/font&gt;&lt;font size="2"&gt;&amp;gt; factory = &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;new&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#008080"&gt;ChannelFactory&lt;/font&gt;&lt;font size="2"&gt;&amp;lt;&lt;/font&gt;&lt;font size="2" color="#008080"&gt;QueryContract&lt;/font&gt;&lt;font size="2"&gt;&amp;gt;(binding, &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;new&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#008080"&gt;EndpointAddress&lt;/font&gt;&lt;font size="2"&gt;(&lt;/font&gt;&lt;font size="2" color="#800000"&gt;"http://destination/"&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt;));&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" color="#008080" face="Courier New"&gt;QueryContract&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt; channel = factory.CreateChannel();&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p style="MARGIN-RIGHT: 0px" dir="ltr"&gt;&lt;font size="2"&gt;&lt;font face="Verdana"&gt;Next, you would wrap your call to Query() in an OperationContextScope.  This essentially populates an OperationContext.Current.&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p style="MARGIN-RIGHT: 0px" dir="ltr"&gt;&lt;font size="2"&gt;&lt;font face="Verdana"&gt;Inside your using block, you could add the address of your local endpoint to the ReplyTo header as well as add a correlation ID:&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;blockquote style="MARGIN-RIGHT: 0px" dir="ltr"&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#0000ff"&gt;using&lt;/font&gt;&lt;font size="2"&gt; (&lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;new&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#008080"&gt;OperationContextScope&lt;/font&gt;&lt;font size="2"&gt;((&lt;/font&gt;&lt;font size="2" color="#008080"&gt;IContextChannel&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt;)channel))&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;{&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#008080"&gt;    OperationContext&lt;/font&gt;&lt;font size="2"&gt;.Current.OutgoingMessageHeaders.ReplyTo = &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;new&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#008080"&gt;EndpointAddress&lt;/font&gt;&lt;font size="2"&gt;(&lt;/font&gt;&lt;font size="2" color="#800000"&gt;"http://callback/"&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt;);&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#008080"&gt;    OperationContext&lt;/font&gt;&lt;font size="2"&gt;.Current.OutgoingMessageHeaders.MessageId = &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;new&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#008080"&gt;UniqueId&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt;();&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;    channel.Query(&lt;/font&gt;&lt;font size="2" color="#800000" face="Courier New"&gt;"foo"&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt;);&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;}&lt;/font&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p style="MARGIN-RIGHT: 0px" dir="ltr"&gt;&lt;font face="Verdana"&gt;After this, you would typically store off the Message ID you created, along with information about the request, in some thread-safe dictionary.&lt;/font&gt;&lt;/p&gt;
&lt;p style="MARGIN-RIGHT: 0px" dir="ltr"&gt;&lt;font face="Verdana"&gt;On the service-side, you might implement Query() as follows:&lt;/font&gt;&lt;/p&gt;&lt;font size="2" color="#0000ff"&gt;
&lt;/font&gt;&lt;blockquote style="MARGIN-RIGHT: 0px" dir="ltr"&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;class&lt;/font&gt;&lt;font face="Courier New"&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#008080"&gt;QueryService&lt;/font&gt;&lt;font size="2"&gt; : &lt;/font&gt;&lt;font size="2" color="#008080"&gt;QueryContract&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;&lt;font size="2"&gt;
&lt;/font&gt;&lt;p&gt;&lt;font face="Courier New"&gt;{&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#0000ff"&gt;    public&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;void&lt;/font&gt;&lt;font size="2"&gt; Query(&lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;string&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt; query)&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;    {&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#008080"&gt;        EndpointAddress&lt;/font&gt;&lt;font size="2"&gt; replyTo = &lt;/font&gt;&lt;font size="2" color="#008080"&gt;OperationContext&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt;.Current.IncomingMessageHeaders.ReplyTo;&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#008080"&gt;        UniqueId&lt;/font&gt;&lt;font size="2"&gt; messageId = &lt;/font&gt;&lt;font size="2" color="#008080"&gt;OperationContext&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt;.Current.IncomingMessageHeaders.MessageId;&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#008080"&gt;        CustomBinding&lt;/font&gt;&lt;font size="2"&gt; binding = &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;new&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#008080"&gt;CustomBinding&lt;/font&gt;&lt;font size="2"&gt;(&lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;new&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#008080"&gt;TextMessageEncodingBindingElement&lt;/font&gt;&lt;font size="2"&gt;(), &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;new&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#008080"&gt;HttpTransportBindingElement&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt;());&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#008080"&gt;        ChannelFactory&lt;/font&gt;&lt;font size="2"&gt;&amp;lt;&lt;/font&gt;&lt;font size="2" color="#008080"&gt;QueryCallbackContract&lt;/font&gt;&lt;font size="2"&gt;&amp;gt; factory = &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;new&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#008080"&gt;ChannelFactory&lt;/font&gt;&lt;font size="2"&gt;&amp;lt;&lt;/font&gt;&lt;font size="2" color="#008080"&gt;QueryCallbackContract&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt;&amp;gt;(binding, replyTo);&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" color="#008080" face="Courier New"&gt;        QueryCallbackContract&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt; channel = factory.CreateChannel();&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#0000ff"&gt;        using&lt;/font&gt;&lt;font size="2"&gt; (&lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;new&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#008080"&gt;OperationContextScope&lt;/font&gt;&lt;font size="2"&gt;((&lt;/font&gt;&lt;font size="2" color="#008080"&gt;IContextChannel&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt;)channel))&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;        {&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" color="#008080" face="Courier New"&gt;            OperationContext&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt;.Current.OutgoingMessageHeaders.RelatesTo = messageId;&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;            channel.Response(&lt;/font&gt;&lt;font size="2" color="#800000" face="Courier New"&gt;"bar"&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt;);&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;        }&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;    }&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;}&lt;/font&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p dir="ltr"&gt;&lt;font face="Verdana"&gt;First, you would fish out the addressing headers that you set (ReplyTo, MessageId).  Next, you would create a channel back to that ReplyTo.  Next, you would create a new OperationContextScope and use that around the new channel, set the RelatesTo header to match the MessageId, and then send the response message.&lt;/font&gt;&lt;/p&gt;
&lt;p dir="ltr"&gt;&lt;font face="Verdana"&gt;(Note, you'd probably want to be slightly fancier than creating a new binding / channel factory for each operation.)&lt;/font&gt;&lt;/p&gt;
&lt;p dir="ltr"&gt;&lt;font face="Verdana"&gt;Lastly, back on the client-side, you would probably fish out the RelatesTo, go back to that dictionary you set on the initial request, and complete the outstanding operation.&lt;/font&gt;&lt;/p&gt;&lt;font face="Verdana"&gt;&lt;font size="2" color="#0000ff"&gt;
&lt;/font&gt;&lt;/font&gt;&lt;blockquote style="MARGIN-RIGHT: 0px" dir="ltr"&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;class&lt;/font&gt;&lt;font face="Courier New"&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#008080"&gt;QueryCallbackService&lt;/font&gt;&lt;font size="2"&gt; : &lt;/font&gt;&lt;font size="2" color="#008080"&gt;QueryCallbackContract&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;&lt;font size="2"&gt;
&lt;/font&gt;&lt;p&gt;&lt;font face="Courier New"&gt;{&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#0000ff"&gt;    public&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;void&lt;/font&gt;&lt;font size="2"&gt; Response(&lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;string&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt; response)&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;    {&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#008080"&gt;        UniqueId&lt;/font&gt;&lt;font size="2"&gt; relatesTo = &lt;/font&gt;&lt;font size="2" color="#008080"&gt;OperationContext&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt;.Current.IncomingMessageHeaders.RelatesTo;&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" color="#008000"&gt;&lt;font face="Courier New"&gt;        // use relateTo to correlate to initial request&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;&lt;font size="2"&gt;
&lt;/font&gt;&lt;p&gt;&lt;font face="Courier New"&gt;    }&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;}&lt;/font&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p dir="ltr"&gt;&lt;font face="Verdana"&gt;It should be noted that in a real application, you might want to be more sophisticated about deciding whether or not to trust the incoming ReplyTo before creating a channel to it.&lt;/font&gt;&lt;/p&gt;
&lt;p dir="ltr"&gt;&lt;font face="Verdana"&gt;So there you go.&lt;/font&gt;&lt;/p&gt;
&lt;p dir="ltr"&gt;&lt;font face="Verdana"&gt;Interestingly, I just realized that utilizing the ReplyTo header has a nice property over utilizing a custom header as you can use EndpointAddress directly (and we will pick up the right addressing version for free).  If you were to define a MessageHeader via CreateMessageHeader(...), you would have to pick a serializable type of EndpointAddress (either EndpointAddressAugust2004 or EndpointAddress10) or write a custom sub-class of MessageHeader that grabbed the ambient Message Version and used that when reading / writing the EndpointAddress.&lt;/font&gt;&lt;/p&gt;
&lt;p dir="ltr"&gt;&lt;font face="Verdana"&gt;But I digress.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Verdana"&gt;&lt;font size="2"&gt;&lt;em&gt;Edit (2006.03.21): Fixed Typo -- Changed QueryContract --&amp;gt; QueryCallbackContract.&lt;/em&gt;&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;</content><author><name>mike-vernal</name></author><thr:total>4</thr:total></entry><entry><id>18531</id><published>2006-02-02T05:40:00.0-05:00</published><updated>2006-02-02T05:40:00.0-05:00</updated><category scheme="http://schemas.google.com/g/2005#kind" term="http://schemas.google.com/blogger/2008/kind#comment"></category><title type="text">re: Fancy Addressing in WCF</title><content type="html">cool, but I don't get why the implementation of the Query operation wouldn't use the QueryCallbackContract...
&lt;br /&gt;
&lt;br /&gt;ChannelFactory&amp;lt;QueryContract&amp;gt; factory = new ChannelFactory&amp;lt;QueryContract&amp;gt;(binding, replyTo);</content><author><name>Anonymous</name></author><thr:in-reply-to ref="18523"></thr:in-reply-to></entry><entry><id>18537</id><published>2006-02-02T08:54:00.0-05:00</published><updated>2006-02-02T08:54:00.0-05:00</updated><category scheme="http://schemas.google.com/g/2005#kind" term="http://schemas.google.com/blogger/2008/kind#comment"></category><title type="text">re: Fancy Addressing in WCF</title><content type="html">Broadly, I think it's if either (a) you want greater decoupling between the request and the reply or (b) you're doing a multicast request-reply operation.
&lt;br /&gt;
&lt;br /&gt;For (a), you can imagine "async" scenarios where I want to be able to send you a message with some work that might take 4 weeks to process.  Instead of holding open an HTTP request during that time, I might just want to send the message and then have the recipient call a service of mine at some point in the future.
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;In WCF, we support doing this to a certain extent with Duplex channels, but it's probably not the case that you would leave your client-side channel open for 4 weeks.
&lt;br /&gt;
&lt;br /&gt;Instead, you'd probably define a WebHosted-service that would spin-up when an incoming request comes in, process the message, and then spin back down.
&lt;br /&gt;
&lt;br /&gt;For (b), one common pattern that I think you see in multi-party interactions is that the query will go out over some multicast channel (e.g., NetPeerTcpBinding, or a theoretical UdpMulticastBinding) and that the response should come back over a point-to-point binding (e.g., NetTcpBinding, or UdpBinding).
&lt;br /&gt;
&lt;br /&gt;Technically, I don't think this pattern is strictly request-reply as it's really single-request, multiple-responses.  That said, I think it's still useful to leverage the addressing mechanisms to implement this scenario.
&lt;br /&gt;
&lt;br /&gt;Cheers,
&lt;br /&gt;-mike</content><author><name>Anonymous</name></author><thr:in-reply-to ref="18523"></thr:in-reply-to></entry><entry><id>19238</id><published>2006-02-26T09:37:00.0-05:00</published><updated>2006-02-26T09:37:00.0-05:00</updated><category scheme="http://schemas.google.com/g/2005#kind" term="http://schemas.google.com/blogger/2008/kind#comment"></category><title type="text">re: Fancy Addressing in WCF</title><content type="html">Hey, Mike!
&lt;br /&gt;
&lt;br /&gt;Have a question. I tryed your sample but I cannot get the service callback channel to work. Here is my code example: 
&lt;br /&gt;
&lt;br /&gt;http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=249131&amp;amp;SiteID=1
&lt;br /&gt;
&lt;br /&gt;Can you tell me what am I doing wrong?
&lt;br /&gt;Thanks.
&lt;br /&gt;
&lt;br /&gt;[melack]</content><author><name>Anonymous</name></author><thr:in-reply-to ref="18523"></thr:in-reply-to></entry><entry><id>20421</id><published>2006-03-21T07:01:00.0-05:00</published><updated>2006-03-21T07:01:00.0-05:00</updated><category scheme="http://schemas.google.com/g/2005#kind" term="http://schemas.google.com/blogger/2008/kind#comment"></category><title type="text">re: Fancy Addressing in WCF</title><content type="html">Whoops, sorry.  I had a typo in my code (I was creating a ChannelFactory parameterized by QueryContract, but I was then creating a QueryCallbackContract.
&lt;br /&gt;
&lt;br /&gt;Looking at the thread, Michelle resolved the issue in the most common way (typically this pattern is used with [ServiceContract(CallbackContract ...))].  In this particular case, I was actually intentionally not using CallbackContract (there are two separate contracts, each linked in app-code and not in infrastructure-code).
&lt;br /&gt;
&lt;br /&gt;Cheers,
&lt;br /&gt;-mike</content><author><name>Anonymous</name></author><thr:in-reply-to ref="18523"></thr:in-reply-to></entry><entry><id>19814</id><published>2006-03-06T21:02:00.0-05:00</published><updated>2006-03-06T21:02:00.0-05:00</updated><category scheme="http://schemas.google.com/g/2005#kind" term="http://schemas.google.com/blogger/2008/kind#post"></category><title type="text">Serializing (Binding, Address) Pairs in WCF</title><content type="html">&lt;p&gt;&lt;font size="2" face="Verdana"&gt;One of the great ways to procrastinate from finishing a presentation is to blog.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;Another way to procrastinate is to find a better blog editor.  ;)  I'm having issues w/ code snippets in this UI.  But I'll save that procrastination venture for another time.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;One of the core virtues (imho) of WCF is its strong emphasis on the decoupling between contracts, bindings, and addresses.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;As I'm sure you know already, contracts define the “what“ of your service (from both the client and service perspective).  They are develop-time, compiled-in assumptions about your app.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;Bindings represent the way that you interact with a particular contract.  This allows you to, say, expose the same application contract over multiple different bindings for the wide array of clients with whom you may have to interact.  Typically, your contract exposes some set of constraints on the binding (and you can optionally add more constraints with the [DeliveryRequirements] attribute).  Our goal in designing those constraints were to make them tight enough to ensure correctness while permissive enough to allow a strong degree of polymorphism amongst bindings.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;Lastly, addresses represent the location of your service.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;Typically, if you are writing a fairly robust client / service app, you want to minimize the couplings between the client and service.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;In terms of endpoints, the pessimal set of couplings you could probably get would be by hard-coding the contract, binding, and address to your service in both your client and service application.  This means that if the service moves, you would have to re-compile both the client an the service to make everything work again.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;A small improvement over that model would be to separate both the service's address and the client's view of that address into a run-time specifiable value.  Most apps either do this themselves or rely upon some built-in support in their app framework.  For instance, in WCF, if you want to change your service location, you can do that by updating both your client and service's config.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;For WCF specifically, an improvement over that model would be to separate both the service's binding and address, as well as the client's view of that information, into a run-time specifiable value.  In fact, our config system is engineered to make this easy and our guidance is pretty prescriptive about this being a Good Thing(tm).  As such, if you wanted to change the binding and address where a WCF was located, you could do that by only updating the client and service config (no recompiles necessary).&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;In both cases, though, you still need to update both the client and the service for what is essentially a service change; this is a little non-ideal.  Ideally, you'd like the client to automatically adapt to the service changes.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;One way that people typically do this is by having the address of the service be found through some sort of discovery mechanism (either directory-based or “peer-to-peer“-ish).  In those cases, the client asks for a service based on some quality (e.g., “give me a service that implements the contract foo at a binding bar“).  Via whatever discovery mechanism is defined, the client discovers an address for that service and then proceeds to interact with the service.  In this way, a service could update its address and the client would pick up that update “for free.“&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;In WCF, of course, you'd really want to go one step further.  Ideally, the only coupling between your client and your service is the contract (as contract-compatibility is a fundamental assumption that is compiled into your app).  The binding and address can be discovered at runtime.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;We have some built-in support to the product for this scenario using the MetadataResolver and MetadataTransferClient scenarios.  The MetadataResolver class can be used to programmatically retrieve the metadata for a service and surface it as a set of ServiceEndpoints.  If you combine this with a discovery approach for metadata addresses, you can essentially achieve the aforementioned decoupling.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;Another approach to solving this problem, however, is to make a (Binding, Address) pair itself serializable.  This means that you can pass it around itself.  For some samples that I've been writing, I've found the ability to do this quite useful.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;Here's the code; warning, this is compiled against the very latest bits on my machine, so it may be slightly ahead of the latest CTP.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Courier New"&gt;[&lt;/font&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#008080"&gt;DataContract&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt;]&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#0000ff"&gt;public&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;class&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#008080"&gt;SerializableEndpoint&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;&lt;font size="2"&gt;
&lt;/font&gt;&lt;p&gt;&lt;font face="Courier New"&gt;{&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" color="#008080" face="Courier New"&gt;    ServiceEndpoint&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt; endpoint;&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;&lt;font size="2" face="Courier New"&gt;
&lt;/font&gt;&lt;p&gt;&lt;font size="2" color="#008080" face="Courier New"&gt;    int&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt; priority;&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;&lt;font size="2"&gt;
&lt;/font&gt;&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#0000ff"&gt;    public&lt;/font&gt;&lt;font size="2"&gt; SerializableEndpoint(&lt;/font&gt;&lt;font size="2" color="#008080"&gt;ServiceEndpoint&lt;/font&gt;&lt;font size="2"&gt; endpoint, &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;int&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt; priority)&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;    {&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" color="#0000ff" face="Courier New"&gt;        this&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt;.endpoint = SanitizeContractInEndpoint(endpoint);&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" color="#0000ff" face="Courier New"&gt;        this&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt;.priority = priority;&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;    }&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;/font&gt; &lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#0000ff"&gt;    public&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#008080"&gt;EndpointAddress&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt; Address&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;    {&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#0000ff"&gt;        get&lt;/font&gt;&lt;font size="2"&gt; { &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;return&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;this&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt;.endpoint.Address; }&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;    }&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;/font&gt; &lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#0000ff"&gt;    public&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#008080"&gt;Binding&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt; Binding&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;    {&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#0000ff"&gt;        get&lt;/font&gt;&lt;font size="2"&gt; { &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;return&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;this&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt;.endpoint.Binding; }&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;    }&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#0000ff"&gt;&lt;/font&gt;&lt;/font&gt; &lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#0000ff"&gt;    public&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;string&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt; ContractName&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;    {&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#0000ff"&gt;        get&lt;/font&gt;&lt;font size="2"&gt; { &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;return&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;this&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt;.endpoint.Contract.Name; }&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;    }&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#0000ff"&gt;&lt;/font&gt;&lt;/font&gt; &lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#0000ff"&gt;    public&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;string&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt; ContractNamespace&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;    {&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#0000ff"&gt;        get&lt;/font&gt;&lt;font size="2"&gt; { &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;return&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;this&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt;.endpoint.Contract.Namespace; }&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;    }&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#0000ff"&gt;&lt;/font&gt;&lt;/font&gt; &lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#0000ff"&gt;    public&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;string&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt; Name&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;    {&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#0000ff"&gt;        get&lt;/font&gt;&lt;font size="2"&gt; { &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;return&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;this&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt;.endpoint.Name; }&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;    }&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;/font&gt; &lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;    [&lt;/font&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#008080"&gt;DataMember&lt;/font&gt;&lt;font size="2"&gt;(IsRequired = &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;true&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt;)]&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#0000ff"&gt;    public&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;int&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt; Priority&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;    {&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#0000ff"&gt;        get&lt;/font&gt;&lt;font size="2"&gt; { &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;return&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;this&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt;.priority; }&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#0000ff"&gt;        internal&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;set&lt;/font&gt;&lt;font size="2"&gt; { &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;this&lt;/font&gt;&lt;font size="2"&gt;.priority = &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;value&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt;; }&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;    }&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;/font&gt; &lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;    [&lt;/font&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#008080"&gt;DataMember&lt;/font&gt;&lt;font size="2"&gt;(IsRequired = &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;true&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt;)]&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#0000ff"&gt;    private&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#008080"&gt;MetadataSet&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt; Metadata&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;    {&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" color="#0000ff"&gt;&lt;font face="Courier New"&gt;        get&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;&lt;font size="2"&gt;
&lt;/font&gt;&lt;p&gt;&lt;font face="Courier New"&gt;        {&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#008080"&gt;            WsdlExporter&lt;/font&gt;&lt;font size="2"&gt; exporter = &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;new&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#008080"&gt;WsdlExporter&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt;();&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;            exporter.ExportEndpoint(&lt;/font&gt;&lt;font size="2" color="#0000ff" face="Courier New"&gt;this&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt;.endpoint);&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#008080"&gt;            IEnumerable&lt;/font&gt;&lt;font size="2"&gt;&amp;lt;&lt;/font&gt;&lt;font size="2" color="#008080"&gt;MetadataSection&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt;&amp;gt; sections = exporter.GetGeneratedMetadata();&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2" color="#0000ff"&gt;            return&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#0000ff"&gt;new&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2" color="#008080"&gt;MetadataSet&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt;(sections);&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;        }&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" color="#0000ff"&gt;&lt;font face="Courier New"&gt;        set&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;&lt;font size="2"&gt;
&lt;/font&gt;&lt;p&gt;&lt;font face="Courier New"&gt;        {&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2"&gt;           WsdlImporter&lt;/font&gt;&lt;font size="2"&gt; importer = &lt;/font&gt;&lt;font size="2"&gt;new&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2"&gt;WsdlImporter&lt;/font&gt;&lt;font size="2"&gt;(&lt;/font&gt;&lt;font size="2"&gt;value&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt;.MetadataSections);&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" color="#008080" face="Courier New"&gt;&lt;font color="#000000"&gt;           &lt;/font&gt;ServiceEndpointCollection&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt; endpoints = importer.ImportAllEndpoints();&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" color="#0000ff" face="Courier New"&gt;&lt;font color="#000000"&gt;           &lt;/font&gt;if&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt; (endpoints.Count != 1)&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;           {&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2"&gt;               throw&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2"&gt;new&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2"&gt;ArgumentException&lt;/font&gt;&lt;font size="2"&gt;(&lt;/font&gt;&lt;font size="2"&gt;"MetadataBundle must contain exactly one endpoint."&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt;);&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;           }&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" color="#0000ff" face="Courier New"&gt;&lt;font color="#000000"&gt;           &lt;/font&gt;this&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt;.endpoint = SanitizeContractInEndpoint(endpoints[0]);&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;        }&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;    }&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;/font&gt; &lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2"&gt;    private&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2"&gt;ServiceEndpoint&lt;/font&gt;&lt;font size="2"&gt; SanitizeContractInEndpoint(&lt;/font&gt;&lt;font size="2"&gt;ServiceEndpoint&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt; endpoint)&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;    {&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;&lt;font size="2"&gt;        ServiceEndpoint&lt;/font&gt;&lt;font size="2"&gt; newEndpoint = &lt;/font&gt;&lt;font size="2"&gt;new&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2"&gt;ServiceEndpoint&lt;/font&gt;&lt;font size="2"&gt;(&lt;/font&gt;&lt;font size="2"&gt;new&lt;/font&gt;&lt;font size="2"&gt; &lt;/font&gt;&lt;font size="2"&gt;ContractDescription&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt;(endpoint.Contract.Name, endpoint.Contract.Namespace));&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;        newEndpoint.Address = endpoint.Address;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;        newEndpoint.Binding = endpoint.Binding;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;        newEndpoint.Name = endpoint.Name;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" color="#0000ff" face="Courier New"&gt;&lt;font color="#000000"&gt;        &lt;/font&gt;return&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Courier New"&gt; newEndpoint;&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;    }&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Courier New"&gt;}&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Verdana"&gt;I include the contract's name and namespace because I hope that's sufficient to correlate the contract with your local one.  I've found it useful if I, say, get back a set of these (Binding, Address) pairs and want to see if any of them are usable with my contract.  I use priority as a way of weighting multiple matching (Binding, Address) pairs.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Verdana"&gt;The serialization mechanism is a little non-ideal, but we are investigating better ways to make a binding itself serializable.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Verdana"&gt;Interestingly, &lt;/font&gt;&lt;font face="Verdana"&gt;ieSpellCheck thinks that WsdlExporter is incorrectly spelled.  It thinks “sexpot” is a better spelling.  I find this amusing, especially  knowing that AlexDeJ named the class.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Verdana"&gt;With that, back to the presentation.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Verdana"&gt;(Nit: Another issue with the blog editor is the lack of “preview;” sorry to those folks that saw the first draft before I re-read it.)&lt;/font&gt;&lt;/p&gt;</content><author><name>mike-vernal</name></author><thr:total>2</thr:total></entry><entry><id>46571</id><published>2007-03-23T10:14:00.0-05:00</published><updated>2007-03-23T10:14:00.0-05:00</updated><category scheme="http://schemas.google.com/g/2005#kind" term="http://schemas.google.com/blogger/2008/kind#comment"></category><title type="text">re: Serializing (Binding, Address) Pairs in WCF</title><content type="html">Great article!
&lt;br /&gt;
&lt;br /&gt;I'm looking for a way to serialize a complete endpoint. I tried your code above, but found, thet with this onle the binding type (basicHTTP, NetTCP) is serialized. I didn't manage to serialize the parameters of the binding. For example if I want to set the AllowCookie Property of the basicHTTBinding to true, serialize the endpoint and deserialize it, this setting is lost and I have the default value which is false. Any suggestions how to solve this?</content><author><name>Anonymous</name></author><thr:in-reply-to ref="19814"></thr:in-reply-to></entry><entry><id>50406</id><published>2008-03-10T05:57:00.0-05:00</published><updated>2008-03-10T05:57:00.0-05:00</updated><category scheme="http://schemas.google.com/g/2005#kind" term="http://schemas.google.com/blogger/2008/kind#comment"></category><title type="text">re: Serializing (Binding, Address) Pairs in WCF</title><content type="html">Hi.
&lt;br /&gt;
&lt;br /&gt;I have a lot of clients who I don't want to update manually, so i'm writing code to automaticly genereate proxies contracts etc, so far so good. But is there any way to serialize the endpoints setting to disk, i.e. the ServiceEndpoint object, so I don't have to generate it each time? I can't see how your code will do that.
&lt;br /&gt;
&lt;br /&gt;Thanx.</content><author><name>Anonymous</name></author><thr:in-reply-to ref="19814"></thr:in-reply-to></entry><entry><id>19884</id><published>2006-03-09T09:44:00.0-05:00</published><updated>2006-03-09T09:44:00.0-05:00</updated><category scheme="http://schemas.google.com/g/2005#kind" term="http://schemas.google.com/blogger/2008/kind#post"></category><title type="text">WS-Addressing Interop is Achieved!</title><content type="html">&lt;p&gt;&lt;font size="2" face="Verdana"&gt;I'm a couple of days late, but still thought I'd share.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;WS-Addressing is currently in the process of becoming a W3C Recommendation.  There are a bunch of steps in that process (think School House Rocks, “I'm just a bill ...”).  One of those steps is the “Candidate Recommendation” step.  That's where the &lt;a href="http://www.w3.org/TR/2005/CR-ws-addr-core-20050817/"&gt;Core&lt;/a&gt; and &lt;a href="http://www.w3.org/TR/2005/CR-ws-addr-soap-20050817/"&gt;Soap&lt;/a&gt; specs are today.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;In order to get to the next step (”Proposed Recommendation”), one of the requirements that the working group put in place was that we achieved a certain level of practical interop between vendors.  Specifically, the Working Group wanted there to be at least four different implementations that interoperated on all of the required features of WS-Addressing and at least two different implementations that interoperated on all of the optional features of WS-Addressing.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;Towards that goal, a sub-group of the working group spun-up to start tackle interop testing.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;After 3 months of work, we achieved our goal two days ago: &lt;a href="http://www.w3.org/2002/ws/addr/testsuite/report/"&gt;http://www.w3.org/2002/ws/addr/testsuite/report/&lt;/a&gt;.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;Specifically, the Microsoft, IBM, Sun, WS02, and JBoss implementations demonstrated full interop on the required features.  The Microsoft, WS02, and JBoss implementations demonstrated full interop on the optional features.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;Now on to PR!&lt;/font&gt;&lt;/p&gt;</content><author><name>mike-vernal</name></author></entry><entry><id>19885</id><published>2006-03-09T09:53:00.0-05:00</published><updated>2006-03-09T09:53:00.0-05:00</updated><category scheme="http://schemas.google.com/g/2005#kind" term="http://schemas.google.com/blogger/2008/kind#post"></category><title type="text">WS-Policy &amp;amp;amp; WS-PolicyAttachment Are Published!</title><content type="html">&lt;p&gt;&lt;font size="2" face="Verdana"&gt;We have just re-published WS-Policy and WS-PolicyAttachment (with co-authors IBM, BEA, SAP, Sonic Software, and VeriSign).  Congrats to Dan Roth, Jeff Schlimmer, Asir, and everyone else who was involved.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;It looks like the spec locations are:&lt;/font&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p class="MsoNormal"&gt;&lt;b&gt;&lt;font size="2" face="Courier New"&gt;&lt;span style="FONT-WEIGHT: bold; FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'"&gt;WS-Policy&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p class="MsoNormal"&gt;&lt;font size="2" face="Courier New"&gt;&lt;span style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'"&gt;&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p class="MsoNormal"&gt;&lt;font size="2" face="Courier New"&gt;&lt;span style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'"&gt;&lt;a href="http://specs.xmlsoap.org/ws/2004/09/policy/" title="http://specs.xmlsoap.org/ws/2004/09/policy/"&gt;Web Services Policy Framework (WS-Policy) version 1.2&lt;/a&gt;&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p class="MsoNormal"&gt;&lt;font size="2" face="Courier New"&gt;&lt;span style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'"&gt;WS-Policy defines a base set of constructs that can be used and extended by other Web services specifications to describe a broad range of service requirements, preferences, and capabilities.&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p class="MsoNormal"&gt;&lt;b&gt;&lt;font size="2" face="Courier New"&gt;&lt;span style="FONT-WEIGHT: bold; FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'"&gt;WS-PolicyAttachment&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p class="MsoNormal"&gt;&lt;font size="2" face="Courier New"&gt;&lt;span style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'"&gt;&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p class="MsoNormal"&gt;&lt;font size="2" face="Courier New"&gt;&lt;span style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'"&gt;&lt;a href="http://specs.xmlsoap.org/ws/2004/09/policy/" title="http://specs.xmlsoap.org/ws/2004/09/policy/"&gt;Web Services Policy Attachment (WS-PolicyAttachment) version 1.2&lt;/a&gt;&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p class="MsoNormal"&gt;&lt;font size="2" face="Courier New"&gt;&lt;span style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'"&gt;WS-PolicyAttachment specifies three specific attachment mechanisms for using policy expressions with existing XML Web service technologies. Specifically, we define how to associate policy expressions with WSDL type definitions and UDDI entities. We also define how to associate implementation-specific policy with all or part of a WSDL portType when exposed from a specific implementation.&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;&lt;/blockquote&gt;</content><author><name>mike-vernal</name></author></entry><entry><id>20420</id><published>2006-03-21T06:38:00.0-05:00</published><updated>2006-03-21T06:38:00.0-05:00</updated><category scheme="http://schemas.google.com/g/2005#kind" term="http://schemas.google.com/blogger/2008/kind#post"></category><title type="text">Kudos to Steve Maine &amp;amp;amp; the Atlas Folks</title><content type="html">&lt;p&gt;&lt;font size="2" face="Verdana"&gt;Kudos to Steve, who just shipped some of the stuff he's been working on: &lt;/font&gt;&lt;a href="http://hyperthink.net/blog/2006/03/20/atlas++Indigo++Crazy++Delicious.aspx"&gt;&lt;font size="2" face="Verdana"&gt;http://hyperthink.net/blog/2006/03/20/atlas++Indigo++Crazy++Delicious.aspx&lt;/font&gt;&lt;/a&gt;&lt;font size="2" face="Verdana"&gt;.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;He's been working on WCF's REST and POX support, specifically the stuff we need to do to have a pretty seamless experience with Atlas.  It is, as Steve puts it, crazy delicous.  Cool stuff.&lt;/font&gt;&lt;/p&gt;</content><author><name>mike-vernal</name></author></entry><entry><id>22387</id><published>2006-04-22T17:40:00.0-05:00</published><updated>2006-04-22T17:40:00.0-05:00</updated><category scheme="http://schemas.google.com/g/2005#kind" term="http://schemas.google.com/blogger/2008/kind#post"></category><title type="text">Area Codes</title><content type="html">&lt;p&gt;At some point I heard an interesting piece of trivia about the initial assignment of area codes.  With rotary phones, the time it takes to dial a digit is actually a function of the digit itself (dialing a 2 takes twice as much time as dialing a 1, dialing a 0 takes 10 times as long as dialing a 1, etc.).&lt;/p&gt;

&lt;p&gt;Keeping this in mind, the people who initially laid out the area codes allocated them as a function of population or importance.&lt;/p&gt;

&lt;p&gt;Intrigued, I munged a web page to give me an ordering of all the area codes based on number of pulses (i.e., sum of digits counting 0 as 10).&lt;/p&gt;

&lt;p&gt;The top few are as follows:&lt;/p&gt;

&lt;pre&gt;
5 - 212 NY New York (New York City Manhattan area, overlays with 646 and 917)
6 - 213 CA California (Downtown Los Angeles area only)
6 - 231 MI Michigan (Traverse City, Ludington, Muskegon, Petoskey and northwestern Michigan)
6 - 312 IL Illinois (downtown central Chicago area)
6 - 321 FL Florida (Orlando, Cocoa Beach, St Cloud and central eastern Florida, overlays with 407)
7 - 214 TX Texas (Dallas area, overlays with 469 and 972)
7 - 313 MI Michigan (Dearborn, Detroit and inner Detroit suburbs)
7 - 412 PA Pennsylvania (Pittsburgh area, McKeesport, Braddock, Duquesne, overlays with 878)
8 - 215 PA Pennsylvania (Philadelphia area, overlays with 267 and 445)
8 - 224 IL Illinois (Waukegan, Des Plaines, northwest Chicago suburbs and northeastern Illinois, overlays with 847)
8 - 251 AL Alabama (Mobile, Jackson and southwestern Alabama)
8 - 314 MO Missouri (St Louis, Florissant, Crestwood, Affton and surrounding suburbs)
8 - 323 CA California (Florence and Los Angeles excluding downtown Los Angeles)
8 - 413 MA Massachusetts (Pittsfield, Springfield, Holyoke, Greenfield and western Massachusetts)
8 - 512 TX Texas (Austin, Lampasas, Bastrop, Milam and central Texas)
&lt;/pre&gt;

&lt;p&gt;The bottom few are:&lt;/p&gt;

&lt;pre&gt;
27 - 908 NJ New Jersey (Washington, Elizabeth, Warren, Plainfield and west central New Jersey)
27 - 980 NC North Carolina (Charlotte, Kingstown and south central North Carolina, overlays with 704)
28 - 909 CA California (San Bernardino, Ontario, Pomona, Chino, Arrowhead and Big Bear Lake areas)
&lt;/pre&gt;

&lt;p&gt;I'm guessing they came along later, but it is fun to think of Elizabeth, NJ as, basically, the least interesting place in the US.&lt;/p&gt;

&lt;p&gt;Random.  Anyway.&lt;/p&gt;</content><author><name>mike-vernal</name></author><thr:total>5</thr:total></entry><entry><id>22693</id><published>2006-04-25T07:34:00.0-05:00</published><updated>2006-04-25T07:34:00.0-05:00</updated><category scheme="http://schemas.google.com/g/2005#kind" term="http://schemas.google.com/blogger/2008/kind#comment"></category><title type="text">re: Area Codes</title><content type="html">Yes, the '909' came along much later (~1992 IIRC). Up until then it was part of 714--Orange County. 909 recently (~2004 IIRC) was overlayed with 951 also.
&lt;br /&gt;</content><author><name>Anonymous</name></author><thr:in-reply-to ref="22387"></thr:in-reply-to></entry><entry><id>24361</id><published>2006-05-19T01:01:00.0-05:00</published><updated>2006-05-19T01:01:00.0-05:00</updated><category scheme="http://schemas.google.com/g/2005#kind" term="http://schemas.google.com/blogger/2008/kind#comment"></category><title type="text">re: Area Codes</title><content type="html">I'm pretty sure that the original design required the 2nd digit of the area code to be a One or Zero.
&lt;br /&gt;
&lt;br /&gt;Back in the 1960's (when I learned to dial a telephone), inter-areacode calls did not use today's "1-" prefix. I believe they relied on the 2nd digit being 0 or 1 to indicate whether you were calling out of your area code or not.
&lt;br /&gt;
&lt;br /&gt;The addition of "1-" happened (I think) in the late 1960's or early 1970's to allow area codes to have an arbitrary 2nd digit.
&lt;br /&gt;
&lt;br /&gt;DB
&lt;br /&gt;</content><author><name>Anonymous</name></author><thr:in-reply-to ref="22387"></thr:in-reply-to></entry><entry><id>29641</id><published>2006-07-04T20:39:00.0-05:00</published><updated>2006-07-04T20:39:00.0-05:00</updated><category scheme="http://schemas.google.com/g/2005#kind" term="http://schemas.google.com/blogger/2008/kind#comment"></category><title type="text">re: Area Codes</title><content type="html">Don is absolutely correct.  Also, when "direct distance dialing" was invented in 1951 (see http://www.att.com/attlabs/reputation/timeline/51trans.html), 212 was all of New York City, not just Manhattan, and it was still that way when I moved to NYC in 1972.  310 being split off from 213 in Los Angeles and 908 being split off from 201 in northern New Jersey came much later.</content><author><name>Anonymous</name></author><thr:in-reply-to ref="22387"></thr:in-reply-to></entry><entry><id>73774</id><published>2009-12-01T13:57:33.0-05:00</published><updated>2009-12-01T13:57:33.0-05:00</updated><category scheme="http://schemas.google.com/g/2005#kind" term="http://schemas.google.com/blogger/2008/kind#comment"></category><title type="text">ma credit repair</title><content type="html">So many different ideas listed here - amazing..</content><author><name>Anonymous</name></author><thr:in-reply-to ref="22387"></thr:in-reply-to></entry><entry><id>73965</id><published>2009-12-12T23:47:41.0-05:00</published><updated>2009-12-12T23:47:41.0-05:00</updated><category scheme="http://schemas.google.com/g/2005#kind" term="http://schemas.google.com/blogger/2008/kind#comment"></category><title type="text">credit repair massachusetts</title><content type="html">I have to put a bookmark on this website!</content><author><name>Anonymous</name></author><thr:in-reply-to ref="22387"></thr:in-reply-to></entry><entry><id>22882</id><published>2006-04-29T12:27:00.0-05:00</published><updated>2006-04-29T12:27:00.0-05:00</updated><category scheme="http://schemas.google.com/g/2005#kind" term="http://schemas.google.com/blogger/2008/kind#post"></category><title type="text">John Battelle Interviews Gary Flake</title><content type="html">&lt;p&gt;&lt;font size="2" face="Verdana"&gt;John Battelle has a good interview with Gary Flake, a Technical Fellow over in MSN: &lt;/font&gt;&lt;a href="http://battellemedia.com/archives/002471.php"&gt;&lt;font size="2" face="Verdana"&gt;http://battellemedia.com/archives/002471.php&lt;/font&gt;&lt;/a&gt;&lt;font size="2" face="Verdana"&gt;.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;It reminded me of a relatively recent conversation I had with some other folks that joined the company within the past 5 years.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;Basically, a few of us were sitting around a table, swapping stories about how we came to the company.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;Some folks talked about knowing that they wanted to come at Microsoft. They'd waited on line for Windows 95 and they'd knocked on Microsoft's doors come recruiting time.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;My experience was pretty different. I grew up as a dedicated Mac user (which still holds true today). I came from a college environment that was violently anti-Microsoft and pro-BSD and pro-Linux. When I was first contemplating coming to Microsoft in my senior year, I had a lot of angst about going to the "evil empire."&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;That said, the reason I came (and the reason I stay) is because of the people. I think Gary pretty much nailed it:&lt;/font&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;Let's talk about people as a preface to culture, because I want to get the "evil" thing out of the way. I know the reputation that MS has with some communities. I was hacking Linux in the early nineties, I have a four digit Slashdot userid, and I've personally written over 100,000 lines of open source code. I say all of this to qualify my opinion. &lt;strong&gt;Being new to MS, the biggest surprise for me was the people&lt;/strong&gt;. I knew they were smart. I knew they were driven. I knew they were competitive. But I had no idea they would also collectively tend towards kindness, openness, self-criticism, passion, righteousness, and even uncertainty. These are great people -- from the executive team down to the rank and file -- these are simply wonderful people in every way.&lt;/font&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;Amen.  Another quote which rings true:&lt;/font&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;font size="2" face="Verdana"&gt;Okay, now I know I am sounding like a corporate drone and I am well aware that for every example above, there are plenty of people in the valley that will bitch about my characterization. When you assume evil, then an ecosystem looks less than well-intentioned. When you assume goodness, then an ecosystem looks like benevolence. The truth is more complex and vastly more interesting. &lt;/font&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;I'm always a little amused when a random act of stupidity by some random Product Manager in some random product is taken as Microsoft corporate policy. As it turns out, if you go in looking for evil, it's usually pretty easy to find it.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;Anyway -- a good interview. Kudos to Gary for his openness and honesty (both good and bad).&lt;/font&gt;&lt;/p&gt;</content><author><name>mike-vernal</name></author></entry><entry><id>29182</id><published>2006-06-29T17:32:00.0-05:00</published><updated>2006-06-29T17:32:00.0-05:00</updated><category scheme="http://schemas.google.com/g/2005#kind" term="http://schemas.google.com/blogger/2008/kind#post"></category><title type="text">Ed Helms Takes On Microsoft</title><content type="html">&lt;p&gt;&lt;font size="2" face="Verdana"&gt;Ed Helms (from the Daily Show) did a video for Microsoft College Recruiting.  It's fan-freaking-tastic.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="FONT-SIZE: 10pt; FONT-FAMILY: 'Verdana','sans-serif'"&gt;The "free soda" person is the awesome Julie Farago.&lt;/span&gt;&lt;/p&gt;
&lt;p style="MARGIN: 0in 0in 0pt" class="MsoNormal"&gt;&lt;font size="2" face="Verdana"&gt;&lt;span style="FONT-SIZE: 10pt; FONT-FAMILY: 'Verdana','sans-serif'"&gt;&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p style="MARGIN: 0in 0in 0pt" class="MsoNormal"&gt;&lt;span style="FONT-SIZE: 10pt; FONT-FAMILY: 'Verdana','sans-serif'"&gt;&lt;a href="http://www.microsoft.com/College/default.mspx"&gt;&lt;font color="#800080"&gt;http://www.microsoft.com/College/default.mspx&lt;/font&gt;&lt;/a&gt; &lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style="MARGIN: 0in 0in 0pt" class="MsoNormal"&gt;&lt;font size="2" face="Verdana"&gt;&lt;span style="FONT-SIZE: 10pt; FONT-FAMILY: 'Verdana','sans-serif'"&gt;&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/font&gt; &lt;/p&gt;
&lt;p style="MARGIN: 0in 0in 0pt" class="MsoNormal"&gt;&lt;font size="2" face="Verdana"&gt;&lt;span style="FONT-SIZE: 10pt; FONT-FAMILY: 'Verdana','sans-serif'"&gt;&lt;o:p&gt;Fantastic.&lt;/o:p&gt;&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;</content><author><name>mike-vernal</name></author></entry><entry><id>37315</id><published>2006-09-06T09:42:00.0-05:00</published><updated>2006-09-06T09:42:00.0-05:00</updated><category scheme="http://schemas.google.com/g/2005#kind" term="http://schemas.google.com/blogger/2008/kind#post"></category><title type="text">Facebook Redesign &amp;amp;amp; New Job</title><content type="html">&lt;p&gt;&lt;font size="2" face="Verdana"&gt;Yesterday, the &lt;a href="http://facebook.com"&gt;Facebook&lt;/a&gt; launched a redesign of their site that included two new features -- News Feeds and Mini Feeds.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;In short, I thought the features were absolutely brilliant.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;Ever since I graduated college (2002), I've basically had one overarching goal around computers and technology -- figuring out ways to help people maintain and grow interpersonal relationships.  The impetus is fairly obvious -- at college, I was surrounded by some of the most amazing, kindest, and most brilliant folks in the world, and I wanted to make sure that I didn't lose that once I left.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;Every so often at Microsoft, a group of folks are asked to come together as a group and pitch an idea to execs.  About three years ago (and again two years ago), I gave basically the same pitch -- I had a friend in college (Al Cho) who was basically the nicest person I've ever met.  Once we graduated, I largely lost contact with him.  I'd get periodic snapshots of where he was (studying at Oxford, working at the U.N., etc.), but I'd lost a recurring touch.  I wanted an &lt;/font&gt;&lt;font size="2" face="Verdana"&gt;app that helped me keep track of all my friends in one place.  It would have blogging, photo sharing, friend-of-friend, events, mobile phone integration, maps integration (e.g., see all friends in a certain area if you're traveling ...), etc.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;&lt;a href="http://friendster.com"&gt;Friendster&lt;/a&gt; had some of that a few years ago, but it was painfully slow, etc.  And then Friendster slowly atrophied.  I think people just stopped having a reason to come back once it lost its novelty.  But that's because Friendster missed the ball -- it's about your friends' lives, stupid.  It's about keeping in touch and seeing what's changing.  They didn't really optimize for that (they felt like they were primarily about search at first).&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;About two months ago, I was chatting with Nick Murphy and I observed that the real killer feature for MySpace or Facebook would be a personal RSS feed that was a changelist for all your friends.  Ultimately, you could track what's going on with your friends in Safari, in Outlook, on your phone, etc.  It would be brilliant.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;Then, this week, Facebook added essentially that feature.  IMHO, I mean, Facebook has got a lot of stuff going for them.  &lt;/font&gt;&lt;font face="Verdana"&gt;&lt;font size="2"&gt;Elegant interface.  Photo sharing and tagging is really quite nice.  Blogging / notes is a little weak, but ok.  They have a developer platform (brilliant -- kudos Fetterman).  And now they have a feed that helps you keep track of your friends and what they're doing.  (They still need to make it RSS, though.)&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Verdana"&gt;&lt;font size="2"&gt;All-in-all, I think it's great.  Kudos.&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Verdana"&gt;&lt;font&gt;&lt;font size="2"&gt;(Of course, it's funny -- there also seems to be a huge backlash against the new site and the new features.  I was a little surprised.  Presumably if they just change the defaults to only publish certain things by default (new photos, new notes, new walls) and not other things (relationship status, etc.), people will be ok.)&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Verdana"&gt;&lt;font&gt;&lt;font size="2"&gt;On an unrelated note, I haven't blogged about Indigo (er, the Windows Communication Foundation) in a while.  That's due, in part, to the fact that I've moved from being a producer to being a consumer of WCF.  I've moved from being a PM on the WCF team to being a developer on the some of the backend infrastructure for &lt;a href="http://live.com"&gt;Windows Live&lt;/a&gt;.  My infrequent blog posts will probably slowly migrate from stuff like WS-Addressing to Amazon and Google.  We'll see.&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;</content><author><name>mike-vernal</name></author><thr:total>3</thr:total></entry><entry><id>37316</id><published>2006-09-06T14:10:00.0-05:00</published><updated>2006-09-06T14:10:00.0-05:00</updated><category scheme="http://schemas.google.com/g/2005#kind" term="http://schemas.google.com/blogger/2008/kind#comment"></category><title type="text">re: Facebook Redesign &amp;amp;amp; New Job</title><content type="html">Here is a live counter of the number of people who have joined the "Students against Facebook News Feed" group on Facebook..... 300,000 and climbing
&lt;br /&gt;
&lt;br /&gt;http://digg.com/tech_news/Facebook_Stalker_City_Includes_LIVE_Counter</content><author><name>Anonymous</name></author><thr:in-reply-to ref="37315"></thr:in-reply-to></entry><entry><id>37451</id><published>2006-09-08T23:15:00.0-05:00</published><updated>2006-09-08T23:15:00.0-05:00</updated><category scheme="http://schemas.google.com/g/2005#kind" term="http://schemas.google.com/blogger/2008/kind#comment"></category><title type="text">re: Facebook Redesign &amp;amp;amp; New Job</title><content type="html">Hello! I’ve just recently checked your blog. You seem to have very intersting and informative posts. Guess, I’d be hanging around and see more of your latest posts.  It was only then I knew about Facebook.  Still thinking if I wanna get myself registered on it.</content><author><name>Anonymous</name></author><thr:in-reply-to ref="37315"></thr:in-reply-to></entry><entry><id>50290</id><published>2008-02-21T15:19:00.0-05:00</published><updated>2008-02-21T15:19:00.0-05:00</updated><category scheme="http://schemas.google.com/g/2005#kind" term="http://schemas.google.com/blogger/2008/kind#comment"></category><title type="text">re: Facebook Redesign &amp;amp;amp; New Job</title><content type="html">blog more!</content><author><name>Anonymous</name></author><thr:in-reply-to ref="37315"></thr:in-reply-to></entry><entry><id>41522</id><published>2006-10-31T11:46:00.0-05:00</published><updated>2006-10-31T11:46:00.0-05:00</updated><category scheme="http://schemas.google.com/g/2005#kind" term="http://schemas.google.com/blogger/2008/kind#post"></category><title type="text">A Philosophical Argument for P != NP</title><content type="html">&lt;p&gt;&lt;font size="2" face="Verdana"&gt;David Levin sent me a link to a &lt;/font&gt;&lt;a href="http://www.scottaaronson.com/blog/2006/09/reasons-to-believe.html"&gt;&lt;font size="2" face="Verdana"&gt;great blog post&lt;/font&gt;&lt;/a&gt;&lt;font size="2" face="Verdana"&gt; that talked about the question of whether P == NP.  From the post:&lt;/font&gt;&lt;/p&gt;
&lt;blockquote style="MARGIN-RIGHT: 0px" dir="ltr"&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;More often than I can remember, I've been asked some form of the following question: "If you computer scientists can't prove P=NP or P!=NP, then why aren't we justified in believing whichever one we want? And why is the 'consensus' that P!=NP anything more than a shared prejudice -- something you repeat to each other so your work won't seem irrelevant?"&lt;/font&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;The author then goes to offer 10 arguments for why it's overwhelmingly likely that P != NP.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2" face="Verdana"&gt;I found &lt;strong&gt;the Philosophy Argument &lt;/strong&gt;(#9) to be truly beautiful:&lt;/font&gt;&lt;/p&gt;
&lt;blockquote style="MARGIN-RIGHT: 0px" dir="ltr"&gt;
&lt;p&gt;&lt;font face="Verdana"&gt;&lt;font size="2"&gt;If P=NP, then the world would be a profoundly different place than we usually assume it to be. There would be no special value in "creative leaps," no fundamental gap between solving a problem and recognizing the solution once it's found. Everyone who could appreciate a symphony would be Mozart; everyone who could follow a step-by-step argument would be Gauss; everyone who could recognize a good investment strategy would be Warren Buffett. It's possible to put the point in Darwinian terms: if this is the sort of universe we inhabited, why wouldn't we already have evolved to take advantage of it? (Indeed, this is an argument not only for P != NP, but for NP-complete problems &lt;/font&gt;&lt;/font&gt;&lt;a href="http://www.scottaaronson.com/papers/npcomplete.pdf"&gt;&lt;font size="2" color="#5588aa" face="Verdana"&gt;not being efficiently solvable in the physical world&lt;/font&gt;&lt;/a&gt;&lt;font size="2" face="Verdana"&gt;.)&lt;/font&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p dir="ltr"&gt;&lt;font size="2" face="Verdana"&gt;It's beautiful for many reasons.  First, the analogy itself is beautiful.  Second, it's self-referential -- after reading it, I was struck by its elegance and surprised that I had never seen it in that way.  But, of course, that's the point -- it's very hard to formulate such an analogy, but it is &lt;span style="FONT-SIZE: 10pt; LINE-HEIGHT: 115%; FONT-FAMILY: 'Verdana','sans-serif'; mso-fareast-font-family: Calibri; mso-fareast-theme-font: minor-latin; mso-bidi-font-family: 'Times New Roman'; mso-bidi-theme-font: minor-bidi; mso-ansi-language: EN-US; mso-fareast-language: EN-US; mso-bidi-language: AR-SA"&gt;comparatively &lt;/span&gt;easy to appreciate it.&lt;/font&gt;&lt;/p&gt;
&lt;p dir="ltr"&gt;&lt;font size="2" face="Verdana"&gt;Very nice indeed.&lt;/font&gt;&lt;/p&gt;</content><author><name>mike-vernal</name></author><thr:total>1</thr:total></entry><entry><id>44751</id><published>2006-12-09T07:44:00.0-05:00</published><updated>2006-12-09T07:44:00.0-05:00</updated><category scheme="http://schemas.google.com/g/2005#kind" term="http://schemas.google.com/blogger/2008/kind#comment"></category><title type="text">re: A Philosophical Argument for P != NP</title><content type="html">i don’t buy this argument.  
&lt;br /&gt;
&lt;br /&gt;if  p=np is true, it may be only because the degree of the polynomial-time algorithm that solves the np-complete problems has an exponent of the order of magnitude 2**(2**m), where m = 1000! (say, just for the sake of argument).  
&lt;br /&gt;
&lt;br /&gt;then the polynomial time solution of any np-complete problem would be known to require no more than n**(2**(2**1000!)) steps, and so p=np would be true.
&lt;br /&gt;
&lt;br /&gt;but I don’t know how much different the world would look to us if this were the case.
&lt;br /&gt;
&lt;br /&gt;for example, i don’t think that if the above version of p=np were true, everyone would be a mozart or a gauss or a warren buffet, or that evolution would be much more expeditious than we’ve observed so far.
&lt;br /&gt;
&lt;br /&gt;of course, once a sufficient amount of history has been accumulated, we might notice that we’d been solving np-complete problems significantly faster than we would have expected if p!=np were true.  
&lt;br /&gt;
&lt;br /&gt;even then, without a rigorous mathematical proof, we still wouldn’t know whether we were successful because p=np is true, or because, like warren buffet, we were just plain lucky.
&lt;br /&gt;</content><author><name>Anonymous</name></author><thr:in-reply-to ref="41522"></thr:in-reply-to></entry></feed>